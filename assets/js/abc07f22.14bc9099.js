"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[640],{6711:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Wprowadzenie-do-j\u0119zyka-Kotlin/expressions","title":"Expressions/Wyra\u017cenia","description":"-","source":"@site/docs/01-Wprowadzenie-do-j\u0119zyka-Kotlin/03-expressions.mdx","sourceDirName":"01-Wprowadzenie-do-j\u0119zyka-Kotlin","slug":"/Wprowadzenie-do-j\u0119zyka-Kotlin/expressions","permalink":"/mobile/docs/Wprowadzenie-do-j\u0119zyka-Kotlin/expressions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-Wprowadzenie-do-j\u0119zyka-Kotlin/03-expressions.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Expressions/Wyra\u017cenia"},"sidebar":"tutorialSidebar","previous":{"title":"Typy proste","permalink":"/mobile/docs/Wprowadzenie-do-j\u0119zyka-Kotlin/typyProste"},"next":{"title":"Podstwowe views","permalink":"/mobile/docs/Podstawowe View/intro"}}');var r=i(4848),s=i(8453);const o={title:"Expressions/Wyra\u017cenia"},t=void 0,l={},d=[{value:"title: Expressions/Wyra\u017cenia",id:"title-expressionswyra\u017cenia",level:2},{value:"wyra\u017cenie if",id:"wyra\u017cenie-if",level:2},{value:"if jako wyra\u017cenie",id:"if-jako-wyra\u017cenie",level:2},{value:"Wyra\u017cenie when",id:"wyra\u017cenie-when",level:2},{value:"when jako wyra\u017cenie",id:"when-jako-wyra\u017cenie",level:2}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"title-expressionswyra\u017cenia",children:"title: Expressions/Wyra\u017cenia"}),"\n",(0,r.jsxs)(e.h1,{id:"expressions--wyra\u017cenia",children:[(0,r.jsx)(e.em,{children:"Expressions"})," / Wyra\u017cenia"]}),"\n",(0,r.jsx)(e.p,{children:"Co to jest wyra\u017cenie/expression?\nWyra\u017cenie (ang. expression) w programowaniu to fragment kodu, kt\xf3ry zwraca warto\u015b\u0107.\nWyra\u017cenie mo\u017ce zawiera\u0107 operatory, sta\u0142e, zmienne, funkcje, a tak\u017ce inne wyra\u017cenia.\nWynikiem wyra\u017cenia zawsze jest jaka\u015b warto\u015b\u0107, kt\xf3r\u0105 mo\u017cna przypisa\u0107 do zmiennej, u\u017cy\u0107 jako argument w funkcji lub operowa\u0107 dalej.\nPRZYK\u0141ADY:\nwyra\u017cenia arytmetyczne\nwyra\u017cenia logiczne\nwyra\u017cenia warunkowe if\nwyra\u017cenie when\nlambda\nwyra\u017cenia funkcyjne\nproste typu\n...\nINSTRUKCJE nie s\u0105 wyra\u017ceniami - przyk\u0142ady\np\u0119tle\nfor\nwhile\ninstrukcja return\ninstrukcja przypisania =\ninstrukcja throw"}),"\n",(0,r.jsx)(e.h2,{id:"wyra\u017cenie-if",children:"wyra\u017cenie if"}),"\n",(0,r.jsx)(e.p,{children:"Standardowa struktura if"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:"if(<condition>) {\n// /....\n} else if (<condition>){\n// ...\n} else {\n\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"if-jako-wyra\u017cenie",children:"if jako wyra\u017cenie"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'fun main() {\n\n    val age = 65\n    // U\u017cycie if jako wyra\u017cenie do wyboru odpowiedniej zni\u017cki\n\n    val discount = if (age < 18) {\n\n        50  // Dla os\xf3b poni\u017cej 18 lat: 50% zni\u017cki\n\n    } else if (age >= 65) {\n\n        30  // Dla senior\xf3w powy\u017cej 65 lat: 30% zni\u017cki\n\n    } else {\n\n        0   // Brak zni\u017cki dla innych\n\n    }\n\n    println("Twoja zni\u017cka wynosi: $discount%")\n\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"wyra\u017cenie-when",children:"Wyra\u017cenie when"}),"\n",(0,r.jsx)(e.p,{children:"when mo\u017ce by\u0107 u\u017cywany zar\xf3wno\njako instrukcja (kt\xf3rej celem jest wykonanie akcji),\njak i wyra\u017cenie (kt\xf3re zwraca warto\u015b\u0107).\nOg\xf3lna struktura"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:"when (value) {\ncase1 -> doSomething()       // Je\u015bli 'value' jest r\xf3wne 'case1'\ncase2 -> doSomethingElse()   // Je\u015bli 'value' jest r\xf3wne 'case2'\nelse -> defaultAction()      // W przeciwnym razie\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"when jako instrukcja"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'fun main() {\n\n    val dayOfWeek = 3\n    when (dayOfWeek) {\n\n        1 -> println("Poniedzia\u0142ek")\n\n        2 -> println("Wtorek")\n\n        3 -> println("\u015aroda")\n\n        4 -> println("Czwartek")\n\n        5 -> println("Pi\u0105tek")\n\n        6, 7 -> println("Weekend")\n\n        else -> println("Niepoprawny dzie\u0144")\n\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"when-jako-wyra\u017cenie",children:"when jako wyra\u017cenie"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'fun main() {\n\n    val dayOfWeek = 3\n\n    val dayName = when (dayOfWeek) {\n\n        1 -> "Poniedzia\u0142ek"\n\n        2 -> "Wtorek"\n\n        3 -> "\u015aroda"\n\n        4 -> "Czwartek"\n\n        5 -> "Pi\u0105tek"\n\n        6, 7 -> "Weekend"\n\n        else -> "Niepoprawny dzie\u0144"\n\n    }\n\n    println("Dzie\u0144 tygodnia: $dayName")\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"MO\u017bNA U\u017bY\u0106 WHEN BEZ PODAWANIA PRZYPADKU WARUNKOWEGO"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'fun main() {\n\n    val number = -10\n\n\n\n    val result = when {\n\n        number > 0 -> "Liczba dodatnia"\n\n        number < 0 -> "Liczba ujemna"\n\n        else -> "Zero"\n\n    }\n    println(result)\n\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"WHEN Z ZAKRESAMI"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'fun main() {\n\n    val score = 85\n\n    when (score) {\n\n        in 90..100 -> println("Ocena: A")\n\n        in 80..89 -> println("Ocena: B")\n\n        in 70..79 -> println("Ocena: C")\n\n        else -> println("Nie zdane")\n\n    }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"WHEN Z TYPAMI"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'fun main() {\n\n    val x: Any = "Hello"\n    val type = when (x) {\n\n        is Int -> "To jest liczba ca\u0142kowita"\n\n        is String -> "To jest napis"\n\n        is Boolean -> "To jest warto\u015b\u0107 logiczna"\n\n        else -> "Nieznany typ"\n\n    }\n    println(type)\n\n}\n\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>t});var a=i(6540);const r={},s=a.createContext(r);function o(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);