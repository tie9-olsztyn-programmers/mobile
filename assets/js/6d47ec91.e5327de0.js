"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[320],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},9169:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Kolejne View/Time View/Chronometer","title":"Chronometer","description":"- widget in Android is a simple timer that can be used to count up from a base time.","source":"@site/docs/3. Kolejne View/1. Time View/3.Chronometer.mdx","sourceDirName":"3. Kolejne View/1. Time View","slug":"/Kolejne View/Time View/Chronometer","permalink":"/mobile/docs/Kolejne View/Time View/Chronometer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3. Kolejne View/1. Time View/3.Chronometer.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Chronometer"},"sidebar":"tutorialSidebar","previous":{"title":"DatePicker","permalink":"/mobile/docs/Kolejne View/Time View/DatePicker"},"next":{"title":"Navigation Component","permalink":"/mobile/docs/Nawigacja/Navigation_Component"}}');var o=t(4848),r=t(8453);const a={title:"Chronometer"},s="Chronometer",d={},l=[{value:"Chronometer in XML",id:"chronometer-in-xml",level:2},{value:"Chronometer in Kotlin",id:"chronometer-in-kotlin",level:2},{value:"Wyja\u015bnienia",id:"wyja\u015bnienia",level:2},{value:"<code>SystemClock</code>",id:"systemclock",level:3},{value:"<code>elapsedRealtime()</code>",id:"elapsedrealtime",level:3},{value:"<code>pauseOffset</code>",id:"pauseoffset",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"chronometer",children:"Chronometer"})}),"\n",(0,o.jsx)(n.admonition,{title:"Chronometer",type:"note",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"widget in Android is a simple timer that can be used to count up from a base time."}),"\n",(0,o.jsx)(n.li,{children:"It\u2019s useful for things like stopwatch apps."}),"\n"]})}),"\n",(0,o.jsx)(n.h2,{id:"chronometer-in-xml",children:"Chronometer in XML"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Chronometer\n    android:id="@+id/myChronometr"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:textSize="30sp"\n    android:layout_margin="20dp"\n    android:layout_gravity="center"\n/>\n\n<LinearLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:orientation="horizontal"\n    android:gravity="center"\n>\n\n    <Button\n        android:id="@+id/startButton"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="start"\n        android:layout_margin="20dp"\n        android:backgroundTint="#123abc"\n    />\n    <Button\n        android:id="@+id/stopButton"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="stop"\n        android:layout_margin="20dp"\n        android:backgroundTint="#4CAF50"\n    />\n\n</LinearLayout>\n<Button\n    android:id="@+id/resetButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="reset"\n    android:layout_margin="20dp"\n    android:layout_gravity="center"\n    android:backgroundTint="#9C27B0"\n/>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"chronometer-in-kotlin",children:"Chronometer in Kotlin"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'class MainActivity : AppCompatActivity() {\n\n    private lateinit var chronometer: Chronometer\n    private lateinit var startBtn: Button\n    private lateinit var stopBtn: Button\n    private lateinit var resetBtn: Button\n    private var running = false\n    private var pauseOffset: Long = 0\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContentView(R.layout.activity_main)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n            insets\n        }\n        chronometer = findViewById<Chronometer>(R.id.myChronometr)\n        startBtn = findViewById(R.id.startButton)\n        stopBtn = findViewById(R.id.stopButton)\n        resetBtn = findViewById(R.id.resetButton)\n\n\n        startBtn.setOnClickListener {\n\n            if (!running) {\n                chronometer.base = SystemClock.elapsedRealtime() - pauseOffset\n                chronometer.start()\n                running = true\n            }\n        }\n\n        stopBtn.setOnClickListener {\n            if (running) {\n                pauseOffset = SystemClock.elapsedRealtime() - chronometer.base\n                Log.i("offset", "pauseOffset: $pauseOffset")\n                chronometer.stop()\n                running = false\n            }\n        }\n\n        resetBtn.setOnClickListener {\n            chronometer.base = SystemClock.elapsedRealtime()\n            Log.i("offset", "base: ${chronometer.base}")\n            pauseOffset = 0\n            chronometer.stop()\n            running = false\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"wyja\u015bnienia",children:"Wyja\u015bnienia"}),"\n",(0,o.jsx)(n.h3,{id:"systemclock",children:(0,o.jsx)(n.code,{children:"SystemClock"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"to klasa w Androidzie, kt\xf3ra dostarcza r\xf3\u017cne metody do mierzenia czasu systemowego."}),"\n",(0,o.jsxs)(n.li,{children:["Jedn\u0105 z tych metod jest ",(0,o.jsx)(n.code,{children:"elapsedRealtime()"}),", kt\xf3ra zwraca czas w milisekundach od momentu uruchomienia urz\u0105dzenia."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"elapsedrealtime",children:(0,o.jsx)(n.code,{children:"elapsedRealtime()"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"val time = SystemClock.elapsedRealtime()"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"zwraca liczb\u0119 milisekund od momentu w\u0142\u0105czenia urz\u0105dzenia,"}),"\n",(0,o.jsx)(n.li,{children:"Ignoruje zmiany czasu systemowego (np. je\u015bli u\u017cytkownik zmieni czas w ustawieniach),"}),"\n",(0,o.jsx)(n.li,{children:"nie resetuje si\u0119 przy u\u015bpieniu telefonu \u2013 nadal liczy czas."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"pauseoffset",children:(0,o.jsx)(n.code,{children:"pauseOffset"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"private var pauseOffset: Long = 0"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"przechowuje ilo\u015b\u0107 czasu, kt\xf3ry up\u0142yn\u0105\u0142 do momentu zatrzymania chronometru"}),"\n",(0,o.jsx)(n.li,{children:"zapewnia poprawne wznowienie po zatrzymaniu chronometru bez niego timer resetowa\u0142by si\u0119 za ka\u017cdym razem na 0 po ponownym starcie."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);