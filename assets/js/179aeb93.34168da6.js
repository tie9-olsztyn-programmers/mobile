"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[936],{8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>d});var a=i(6540);const t={},o=a.createContext(t);function r(n){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),a.createElement(o.Provider,{value:e},n.children)}},9717:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"Nawigacja/binding","title":"Binding","description":"- View Binding to mechanizm wprowadzony przez Google, kt\xf3ry pozwala na bezpieczne i wygodne odwo\u0142ywanie si\u0119 do widok\xf3w XML w kodzie Kotlin, bez u\u017cycia findViewById().","source":"@site/docs/6.Nawigacja/2-binding.mdx","sourceDirName":"6.Nawigacja","slug":"/Nawigacja/binding","permalink":"/mobile/docs/Nawigacja/binding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/6.Nawigacja/2-binding.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Binding"},"sidebar":"tutorialSidebar","previous":{"title":"Navigation Component","permalink":"/mobile/docs/Nawigacja/Navigation_Component"},"next":{"title":"Toolbar jako Menu","permalink":"/mobile/docs/Nawigacja/Menu/menu"}}');var t=i(4848),o=i(8453);const r={title:"Binding"},d="Wprowadzenie do bindingu",l={},s=[{value:"Dlaczego <code>_binding</code> jest <code>nullable</code> (?) i ustawiane na <code>null</code> w <code>onDestroyView()</code>?",id:"dlaczego-_binding-jest-nullable--i-ustawiane-na-null-w-ondestroyview",level:2},{value:"W\u0142\u0105czenie bindingu",id:"w\u0142\u0105czenie-bindingu",level:2},{value:"binding w MainActivity",id:"binding-w-mainactivity",level:2},{value:"binding w <code>HomeFragment.kt</code>",id:"binding-w-homefragmentkt",level:2},{value:"binding w <code>DetailsFragment.kt</code>",id:"binding-w-detailsfragmentkt",level:2},{value:"binding w <code>ThirdFragment.kt</code>",id:"binding-w-thirdfragmentkt",level:2}];function c(n){const e={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"wprowadzenie-do-bindingu",children:"Wprowadzenie do bindingu"})}),"\n",(0,t.jsx)(e.admonition,{title:"Co to jest binding?",type:"info",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["View Binding to mechanizm wprowadzony przez Google, kt\xf3ry pozwala na bezpieczne i wygodne odwo\u0142ywanie si\u0119 do widok\xf3w XML w kodzie Kotlin, bez u\u017cycia ",(0,t.jsx)(e.code,{children:"findViewById()"}),"."]}),"\n",(0,t.jsx)(e.li,{children:"Zamiast tego, Android generuje klasy bindingowe dla ka\u017cdego pliku XML w folderze res/layout/, co pozwala na \u0142atwy dost\u0119p do widok\xf3w za pomoc\u0105 wygenerowanych w\u0142a\u015bciwo\u015bci."}),"\n"]})}),"\n",(0,t.jsx)(e.admonition,{title:"Zalety",type:"tip",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Nie musisz u\u017cywa\u0107 ",(0,t.jsx)(e.code,{children:"findViewById()"})]}),"\n",(0,t.jsxs)(e.li,{children:["Bezpieczne typowanie \u2013 ",(0,t.jsx)(e.code,{children:"binding.textView"})," jest typu ",(0,t.jsx)(e.code,{children:"TextView"}),", wi\u0119c nie musisz rzutowa\u0107 (",(0,t.jsx)(e.code,{children:"findViewById<TextView>(R.id.textView)"}),")"]}),"\n",(0,t.jsx)(e.li,{children:"Czytelniejszy kod \u2013 wszystkie widoki s\u0105 dost\u0119pne przez binding"}),"\n"]})}),"\n",(0,t.jsxs)(e.h1,{id:"view-binding-we-fragmentach",children:[(0,t.jsx)(e.em,{children:"View Binding"})," we fragmentach"]}),"\n",(0,t.jsx)(e.p,{children:"W Fragment musisz dba\u0107 o cykl \u017cycia widoku (onCreateView() \u2192 onDestroyView()), dlatego stosujemy nullable _binding:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:"class HomeFragment : Fragment() {\n\n    private var _binding: FragmentHomeBinding? = null\n    private val binding get() = _binding!!\n...\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null // Zapobieganie wyciekom pami\u0119ci\n    }\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"dlaczego-_binding-jest-nullable--i-ustawiane-na-null-w-ondestroyview",children:["Dlaczego ",(0,t.jsx)(e.code,{children:"_binding"})," jest ",(0,t.jsx)(e.code,{children:"nullable"})," (?) i ustawiane na ",(0,t.jsx)(e.code,{children:"null"})," w ",(0,t.jsx)(e.code,{children:"onDestroyView()"}),"?"]}),"\n",(0,t.jsx)(e.p,{children:"Fragment przechowuje swoj\u0105 instancj\u0119 d\u0142u\u017cej ni\u017c widok, wi\u0119c musimy usun\u0105\u0107 referencj\u0119 do View, gdy jest niszczony.\nZapobiega wyciekom pami\u0119ci!"}),"\n",(0,t.jsx)(e.h2,{id:"w\u0142\u0105czenie-bindingu",children:"W\u0142\u0105czenie bindingu"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'build.gradle.kts(Modul: app)\n\nandroid {\nnamespace = "com.example.mynavgraph"\ncompileSdk = 35\n\n//...\n\n    kotlinOptions {\n        jvmTarget = "11"\n    }\n    buildFeatures {\n        viewBinding = true\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"binding-w-mainactivity",children:"binding w MainActivity"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:"class MainActivity : AppCompatActivity() {\n\n    private lateinit var navController: NavController\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n\n        enableEdgeToEdge()\n        //setContentView(R.layout.activity_main)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n            insets\n        }\n\n        // Po\u0142\u0105czenie z NavControllerem\n        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment\n        navController = navHostFragment.navController\n\n        // ToolBar jako ActioBar\n//        val toolbar = findViewById<MaterialToolbar>(R.id.toolbar)\n//        setSupportActionBar(toolbar)\nsetSupportActionBar(binding.toolbar)\n\n        // Po\u0142\u0105czenie ToolBara z NavControllerem\n        setupActionBarWithNavController(navController)\n\n    }\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"binding-w-homefragmentkt",children:["binding w ",(0,t.jsx)(e.code,{children:"HomeFragment.kt"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:'class HomeFragment : Fragment() {\n\n    private var _binding: FragmentHomeBinding? = null // _binding b\u0119dzie przechowywac obiekt View Binding\n    private val binding get() = _binding!! // dzi\u0119ki temu mo\u017cemy pisa\u0107 binding. zamiast _binding?.\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        // return inflater.inflate(R.layout.fragment_home, container, false)\n        _binding = FragmentHomeBinding.inflate(inflater, container, false)\n        return  binding.root\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance(param1: String, param2: String) = HomeFragment()\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val navController = findNavController()\n\n\n        // automatyczna konwersja python_case na camelCase\n        binding.navigationButton.setOnClickListener {\n            val action = HomeFragmentDirections.homeToDetailsAction(userName = "Jarek")\n            navController.navigate(action)\n        }\n\n//        view.findViewById<Button>(R.id.navigation_button).setOnClickListener {\n//            val action = HomeFragmentDirections.homeToDetailsAction(userName = "Jarek")\n//            navController.navigate(action)\n//        }\n}\n\n    override fun onDestroy() {\n        super.onDestroy()\n        // Fragmenty maj\u0105 cykl \u017cycia, a _binding powinien by\u0107 nullem,\n        // gdy View jest niszczony, aby unikn\u0105\u0107 wyciek\xf3w pami\u0119ci.\n        _binding = null\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.h2,{id:"binding-w-detailsfragmentkt",children:["binding w ",(0,t.jsx)(e.code,{children:"DetailsFragment.kt"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:'class HomeFragment : Fragment() {\n\n    private var _binding: FragmentHomeBinding? = null // _binding b\u0119dzie przechowywac obiekt View Binding\n    private val binding get() = _binding!! // dzi\u0119ki temu mo\u017cemy pisa\u0107 binding. zamiast _binding?.\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        // return inflater.inflate(R.layout.fragment_home, container, false)\n        _binding = FragmentHomeBinding.inflate(inflater, container, false)\n        return  binding.root\n    }\n\n    ...\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val navController = findNavController()\n\n\n        // automatyczna konwersja python_case na camelCase\n        binding.navigationButton.setOnClickListener {\n            val action = HomeFragmentDirections.homeToDetailsAction(userName = "Jarek")\n            navController.navigate(action)\n        }\n\n//        view.findViewById<Button>(R.id.navigation_button).setOnClickListener {\n//            val action = HomeFragmentDirections.homeToDetailsAction(userName = "Jarek")\n//            navController.navigate(action)\n//        }\n}\n\n    override fun onDestroy() {\n        super.onDestroy()\n        // Fragmenty maj\u0105 cykl \u017cycia, a _binding powinien by\u0107 nullem,\n        // gdy View jest niszczony, aby unikn\u0105\u0107 wyciek\xf3w pami\u0119ci.\n        _binding = null\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.h2,{id:"binding-w-thirdfragmentkt",children:["binding w ",(0,t.jsx)(e.code,{children:"ThirdFragment.kt"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:'class ThirdFragment : Fragment() {\n    private val args: ThirdFragmentArgs by navArgs()\n    private var _binding: FragmentThirdBinding? = null\n    private val binding get() = _binding!!\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        binding.infoThirdFragmentTextview.text = "informacja z Details: ${args.message}"\n        binding.backHomeBtn.setOnClickListener {\n            findNavController().navigate(R.id.back_home_form_third)\n        }\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n\n        _binding = FragmentThirdBinding.inflate(inflater, container, false)\n        return binding.root\n\n        //return inflater.inflate(R.layout.fragment_third, container, false)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        _binding = null\n    }\n\n    companion object {\n\n        @JvmStatic\n        fun newInstance(param1: String, param2: String) = ThirdFragment()\n    }\n'})})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}}}]);