"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[8631],{4207:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"Intro Kotlin/Funkcje/funkcje","title":"Funkcje","description":"- to fragment kodu, kt\xf3ry wykonuje okre\u015blone zadanie","source":"@site/docs/1. Intro Kotlin/06-Funkcje/01-funkcje.mdx","sourceDirName":"1. Intro Kotlin/06-Funkcje","slug":"/Intro Kotlin/Funkcje/funkcje","permalink":"/mobile/docs/Intro Kotlin/Funkcje/funkcje","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1. Intro Kotlin/06-Funkcje/01-funkcje.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Funkcje"},"sidebar":"tutorialSidebar","previous":{"title":"Tablice i listy","permalink":"/mobile/docs/Intro Kotlin/tablitc-i-listy"},"next":{"title":"Funkcje strza\u0142kowe","permalink":"/mobile/docs/Intro Kotlin/Funkcje/funkcje-strzalkowe"}}');var t=i(4848),r=i(8453);const o={title:"Funkcje"},c="Funkcja w Kotlinie:",l={},s=[{value:"Argumenty",id:"argumenty",level:2},{value:"Parametr",id:"parametr",level:2},{value:"Podstawowa sk\u0142adnia funkcji w Kotlinie",id:"podstawowa-sk\u0142adnia-funkcji-w-kotlinie",level:2},{value:"Funkcja zwraca <code>Int</code>",id:"funkcja-zwraca-int",level:3},{value:"Funkcja nic nie zwraca <code>Unit</code>",id:"funkcja-nic-nie-zwraca-unit",level:3},{value:"Funkcje jako wyra\u017cenia",id:"funkcje-jako-wyra\u017cenia",level:3},{value:"Domy\u015blne warto\u015bci parametr\xf3w",id:"domy\u015blne-warto\u015bci-parametr\xf3w",level:3},{value:"Przyk\u0142ady",id:"przyk\u0142ady",level:2},{value:"Funkcja wy\u017cszego rz\u0119du",id:"funkcja-wy\u017cszego-rz\u0119du",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"funkcja-w-kotlinie",children:"Funkcja w Kotlinie:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"to fragment kodu, kt\xf3ry wykonuje okre\u015blone zadanie"}),"\n",(0,t.jsx)(e.li,{children:"mo\u017ce by\u0107 wywo\u0142any w dowolnym miejscu programu."}),"\n",(0,t.jsx)(e.li,{children:"umo\u017cliwiaja organizowanie kodu w logiczne bloki, kt\xf3re mog\u0105 by\u0107 wielokrotnie u\u017cywane bez konieczno\u015bci ich powtarzania."}),"\n",(0,t.jsx)(e.li,{children:"mo\u017ce przyjmowa\u0107 argumenty (dane wej\u015bciowe) i zwraca\u0107 warto\u015b\u0107 (wynik)."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"argumenty",children:"Argumenty"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"to, co przekazujemy do funkcji."}),"\n",(0,t.jsx)(e.li,{children:"argument (czyli warto\u015b\u0107 taka jak 2 lub \u201dPizza\u201d) l\u0105duje prosto w parametrze."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"parametr",children:"Parametr"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["to nic innego jak zmienna lokalna:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"ma swoj\u0105 nazw\u0119,"}),"\n",(0,t.jsx)(e.li,{children:"ma typ,"}),"\n",(0,t.jsx)(e.li,{children:"u\u017cywana wewn\u0105trz cia\u0142a funkcji."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"podstawowa-sk\u0142adnia-funkcji-w-kotlinie",children:"Podstawowa sk\u0142adnia funkcji w Kotlinie"}),"\n",(0,t.jsxs)(e.p,{children:["Funkcja w Kotlinie jest definiowana za pomoc\u0105 s\u0142owa kluczowego ",(0,t.jsx)(e.code,{children:"fun"}),", a jej sk\u0142adnia wygl\u0105da nast\u0119puj\u0105co:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:"fun nazwaFunkcji(parametr1: Typ, parametr2: Typ): TypZwracany {\n    // cia\u0142o funkcji\n\nreturn warto\u015b\u0107\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"funkcja-zwraca-int",children:["Funkcja zwraca ",(0,t.jsx)(e.code,{children:"Int"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:"fun printSum(int1: Int, int2: Int) : Int{\n\tval result = int1 + int2\n\n\treturn result\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"funkcja-nic-nie-zwraca-unit",children:["Funkcja nic nie zwraca ",(0,t.jsx)(e.code,{children:"Unit"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:"fun printSum(int1: Int, int2: Int): Unit {\n    val result = int1 + int2\n    println(result)\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"funkcje-jako-wyra\u017cenia",children:"Funkcje jako wyra\u017cenia"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"fun max(a: Int, b: Int): Int = if (a > b) a else b"})}),"\n",(0,t.jsxs)(e.p,{children:["a nawet upro\u015bci\u0107 do\n",(0,t.jsx)(e.code,{children:"fun max(a: Int, b: Int) = if (a > b) a else b"})]}),"\n",(0,t.jsx)(e.h3,{id:"domy\u015blne-warto\u015bci-parametr\xf3w",children:"Domy\u015blne warto\u015bci parametr\xf3w"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:'fun powitajImie(imie: String = "\u015awiecie"): String {\n    return "Cze\u015b\u0107, $imie!"\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"przyk\u0142ady",children:"Przyk\u0142ady"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:'fun powitanie(imie: String = "Go\u015b\u0107"): String {\n    return "Witaj, $imie!"\n}\n\nfun main() {\n    println(powitanie())           // Wypisze: Witaj, Go\u015b\u0107!\n    println(powitanie("Ania"))     // Wypisze: Witaj, Ania!\n}\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:"fun pomnoz(a: Int, b: Int) = a * b\n\nfun main() {\nprintln(pomnoz(4, 6))  // Wypisze: 24\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"funkcja-wy\u017cszego-rz\u0119du",children:"Funkcja wy\u017cszego rz\u0119du"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:"fun operujNaLiczbach(a: Int, b: Int, operacja: (Int, Int) -> Int): Int {\n    return operacja(a, b)\n}\n\nfun dodaj(a: Int, b: Int): Int {\n    return a + b\n}\n\nfun main() {\n    val suma = operujNaLiczbach(3, 7, ::dodaj) // :: to jest operator function reference\n    println(suma)  // Wypisze: 10\n\n    val mnozenie = operujNaLiczbach(3, 7) { x, y -> x * y }\n    println(mnozenie)  // Wypisze: 21\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>c});var a=i(6540);const t={},r=a.createContext(t);function o(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);