"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[281],{7936:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Kolejne View/Time","title":"DatePicker","description":"DatePicker to wid\u017cet, kt\xf3ry pozwala u\u017cytkownikowi wybra\u0107 dat\u0119 (dzie\u0144, miesi\u0105c, rok). Mo\u017ce dzia\u0142a\u0107 jako:","source":"@site/docs/3. Kolejne View/Time.md","sourceDirName":"3. Kolejne View","slug":"/Kolejne View/Time","permalink":"/mobile/docs/Kolejne View/Time","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3. Kolejne View/Time.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Podstwowe views","permalink":"/mobile/docs/Podstawowe View/intro"}}');var a=i(4848),r=i(8453);const o={},d="DatePicker",s={},c=[{value:"DatePicker",id:"datepicker-1",level:2},{value:"Nowe opcje:",id:"nowe-opcje",level:3},{value:"DatePickerDialog",id:"datepickerdialog",level:2},{value:"TimePicker",id:"timepicker-1",level:2},{value:"TimePickerDialog",id:"timepickerdialog",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"datepicker",children:"DatePicker"})}),"\n",(0,a.jsx)(n.p,{children:"DatePicker to wid\u017cet, kt\xf3ry pozwala u\u017cytkownikowi wybra\u0107 dat\u0119 (dzie\u0144, miesi\u0105c, rok). Mo\u017ce dzia\u0142a\u0107 jako:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Osadzony wid\u017cet w XML (DatePicker) \u2013 sta\u0142y element interfejsu."}),"\n",(0,a.jsx)(n.li,{children:"Okno dialogowe (DatePickerDialog) \u2013 wy\u015bwietlane na \u017c\u0105danie."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"datepicker-1",children:"DatePicker"}),"\n",(0,a.jsx)(n.h3,{id:"nowe-opcje",children:"Nowe opcje:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:'android:datePickerMode="calendar" '}),"\u2192 widok kalendarza.\n",(0,a.jsx)(n.code,{children:'android:datePickerMode="spinner"'})," \u2192 przewijane listy."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"obs\u0142uga wyboru daty"}),": ",(0,a.jsx)(n.code,{children:"setOnDateChangedListener { view, year, month, day -> ... }"})]}),"\n",(0,a.jsx)(n.p,{children:"==uwaga==: month + 1 \u2013 Android liczy miesi\u0105ce od 0 (stycze\u0144 = 0, luty = 1\u2026)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<DatePicker\n    android:id="@+id/my_calendar_datepicker"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:datePickerMode="calendar"\n    android:layout_margin="10dp"\n    android:padding="10dp"\n/>\n'})}),"\n",(0,a.jsx)(n.p,{children:"obs\u0142uga w Kotlinie - wewn\u0105trz metody onCreate"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'val myDatePickerCalendar: DatePicker = findViewById(R.id.my_calendar_datepicker)\nmyDatePickerCalendar.setOnDateChangedListener { view, year, monthOfYear, dayOfMonth ->\nval selectedDate = "$dayOfMonth/${monthOfYear+1}/$year"\nLog.d("test", "$view")\nLog.i("test", selectedDate)\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"datepickerdialog",children:"DatePickerDialog"}),"\n",(0,a.jsx)(n.p,{children:"DatePickerDialog to wersja DatePicker, kt\xf3r\u0105 otwieramy na \u017c\u0105danie (np. po klikni\u0119ciu przycisku)."}),"\n",(0,a.jsx)(n.p,{children:"Dodajemy Buttona"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<Button\n    android:id="@+id/open_datepicker_button"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Wybierz dat\u0119"/>\n'})}),"\n",(0,a.jsx)(n.p,{children:"w metodzie onCreate"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"val showDatePickerButton: Button = findViewById(R.id.open_datepicker_button)\nshowDatePickerButton.setOnClickListener {\nshowDatePickerDialog()\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"w tej samej klasie, ale poza metod\u0105 onCreate"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'private fun showDatePickerDialog() {\nval calendar = Calendar.getInstance() // tworzy obiekt kalendarz\nval year = calendar.get(Calendar.YEAR) // pobiekramy aktualny rok\nval month = calendar.get(Calendar.MONTH)\nval day = calendar.get(Calendar.DAY_OF_MONTH)\n\n\n    Log.i("test", "${Calendar.YEAR}")\n    Log.i("test", "$year")\n\n    val datePickerDialog = DatePickerDialog(this,{_, selectedYear, selectedMonth, selectedDay ->\n        val selectedDate = "$selectedYear/${selectedMonth+1}/$selectedDay"\n        Toast.makeText(this, "Wybrano: $selectedDate", Toast.LENGTH_LONG).show()\n    }, year, month, day)\n\n    datePickerDialog.show()\n}\n'})}),"\n",(0,a.jsx)(n.h1,{id:"timepicker",children:"TimePicker"}),"\n",(0,a.jsx)(n.p,{children:"TimePicker to komponent, kt\xf3ry pozwala u\u017cytkownikowi wybra\u0107 godzin\u0119 i minuty.\nMo\u017ce dzia\u0142a\u0107 w dw\xf3ch trybach:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Jako osadzony wid\u017cet w XML (widoczny ca\u0142y czas)"}),"\n",(0,a.jsx)(n.li,{children:"Jako TimePickerDialog (okno dialogowe, kt\xf3re pojawia si\u0119 po klikni\u0119ciu)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"opcje dodatkowe"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'android:timePickerMode="spinner"  \u2013 pokazuje tryb przewijania\nandroid:timePickerMode="clock"   \u2013 pokazuje zegar (domy\u015blnie)\nandroid:is24HourView="true"             \u2013 wymusza 24-godzinny format\n'})}),"\n",(0,a.jsx)(n.h2,{id:"timepicker-1",children:"TimePicker"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<TimePicker\n    android:id="@+id/spinner_timepicker"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:timePickerMode="spinner"\n/>\n'})}),"\n",(0,a.jsx)(n.p,{children:"w ciele moetody onCreate"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'val timePicker = findViewById<TimePicker>(R.id.spinner_timepicker)\ntimePicker.setIs24HourView(true) // Ustawienie trybu 24-godzinnego\n\ntimePicker.setOnTimeChangedListener { view, hour, minute ->\nval selectedTime = "$hour:$minute"\nview.setBackgroundColor(Color.CYAN)// przyk\u0142ad u\u017cyciea argumentu view\nToast.makeText(this, "Wybrana godzina: $selectedTime", Toast.LENGTH_SHORT).show()\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"timepickerdialog",children:"TimePickerDialog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<Button\n    android:id="@+id/pickTimeBtn"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Pick Time"\n    android:layout_margin="20dp"\n    android:layout_gravity="center_horizontal"\n/>\n\n<TextView\n    android:id="@+id/selectedTimeTextView"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Selected Time: -- : --"\n    android:layout_margin="20dp"\n    android:layout_gravity="center_vertical|center_horizontal"\n    android:textSize="30sp"\n/>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'class MainActivity : AppCompatActivity() {\n\n    private lateinit var myBtn: Button\n    private lateinit var myTextView: TextView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n       //...\n\n        myBtn = findViewById(R.id.pickTimeBtn)\n        myTextView = findViewById(R.id.selectedTimeTextView)\n\n        myBtn.setOnClickListener {\n            showTimePickerDialog()\n        }\n\n    }\n\n    private fun showTimePickerDialog() {\n        val calender = Calendar.getInstance()\n        val hour = calender.get(Calendar.HOUR_OF_DAY)\n        val minute = calender.get(Calendar.MINUTE)\n\n        val timePickerDialog = TimePickerDialog(this, {\n            _ : TimePicker, selectedHour: Int, selectedMinute: Int ->\n                myTextView.text = "Selected Time: $selectedHour : $selectedMinute "\n        }, hour, minute, true)\n\n        timePickerDialog.show()\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h1,{id:"chronometer",children:"Chronometer"}),"\n",(0,a.jsx)(n.p,{children:"The Chronometer widget in Android is a simple timer that can be used to count up from a base time. It\u2019s useful for things like stopwatch apps."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<Chronometer\n    android:id="@+id/myChronometr"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:textSize="30sp"\n    android:layout_margin="20dp"\n    android:layout_gravity="center"\n/>\n\n<LinearLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:orientation="horizontal"\n    android:gravity="center"\n>\n\n    <Button\n        android:id="@+id/startButton"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="start"\n        android:layout_margin="20dp"\n        android:backgroundTint="#123abc"\n    />\n    <Button\n        android:id="@+id/stopButton"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="stop"\n        android:layout_margin="20dp"\n        android:backgroundTint="#4CAF50"\n    />\n\n</LinearLayout>\n<Button\n    android:id="@+id/resetButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="reset"\n    android:layout_margin="20dp"\n    android:layout_gravity="center"\n    android:backgroundTint="#9C27B0"\n/>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'class MainActivity : AppCompatActivity() {\n\n    private lateinit var chronometer: Chronometer\n    private lateinit var startBtn: Button\n    private lateinit var stopBtn: Button\n    private lateinit var resetBtn: Button\n    private var running = false\n    private var pauseOffset: Long = 0\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContentView(R.layout.activity_main)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n            insets\n        }\n        chronometer = findViewById<Chronometer>(R.id.myChronometr)\n        startBtn = findViewById(R.id.startButton)\n        stopBtn = findViewById(R.id.stopButton)\n        resetBtn = findViewById(R.id.resetButton)\n\n\n        startBtn.setOnClickListener {\n\n            if (!running) {\n                chronometer.base = SystemClock.elapsedRealtime() - pauseOffset\n                chronometer.start()\n                running = true\n            }\n        }\n\n        stopBtn.setOnClickListener {\n            if (running) {\n                pauseOffset = SystemClock.elapsedRealtime() - chronometer.base\n                Log.i("offset", "pauseOffset: $pauseOffset")\n                chronometer.stop()\n                running = false\n            }\n        }\n\n        resetBtn.setOnClickListener {\n            chronometer.base = SystemClock.elapsedRealtime()\n            Log.i("offset", "base: ${chronometer.base}")\n            pauseOffset = 0\n            chronometer.stop()\n            running = false\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"SystemClock"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"to klasa w Androidzie, kt\xf3ra dostarcza r\xf3\u017cne metody do mierzenia czasu systemowego."}),"\n",(0,a.jsx)(n.li,{children:"Jedn\u0105 z tych metod jest elapsedRealtime(), kt\xf3ra zwraca czas w milisekundach od momentu uruchomienia urz\u0105dzenia."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"elapsedRealtime()"}),"\n",(0,a.jsx)(n.code,{children:"val time = SystemClock.elapsedRealtime()"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"zwraca liczb\u0119 milisekund od momentu w\u0142\u0105czenia urz\u0105dzenia,"}),"\n",(0,a.jsx)(n.li,{children:"Ignoruje zmiany czasu systemowego (np. je\u015bli u\u017cytkownik zmieni czas w ustawieniach),"}),"\n",(0,a.jsx)(n.li,{children:"nie resetuje si\u0119 przy u\u015bpieniu telefonu \u2013 nadal liczy czas."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"pauseOffset"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"private var pauseOffset: Long = 0"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"przechowuje ilo\u015b\u0107 czasu, kt\xf3ry up\u0142yn\u0105\u0142 do momentu zatrzymania chronometru"}),"\n",(0,a.jsx)(n.li,{children:"zapewnia poprawne wznowienie po zatrzymaniu chronometru bez niego timer resetowa\u0142by si\u0119 za ka\u017cdym razem na 0 po ponownym starcie."}),"\n"]}),"\n",(0,a.jsx)(n.h1,{id:"counterdowntimer",children:"CounterDownTimer"}),"\n",(0,a.jsx)(n.p,{children:"CountDownTimer to wbudowana klasa w Androidzie, kt\xf3ra pozwala na odliczanie czasu w d\xf3\u0142 \u2013 przydatne do np. timer\xf3w, licznik\xf3w czasu, quiz\xf3w itp."}),"\n",(0,a.jsx)(n.p,{children:"opis u\u017cycia"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Tworzysz obiekt z:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"czasem trwania (millisInFuture) \u2013 ile ma trwa\u0107 odliczanie,\ninterwa\u0142em (countDownInterval) \u2013 co ile milisekund ma by\u0107 wywo\u0142ywana metoda onTick()."}),"\n",(0,a.jsxs)(n.li,{children:["Po starcie:\\","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"onTick()"})," \u2013 wywo\u0142ywane co countDownInterval milisekund,"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"onFinish()"})," \u2013 wywo\u0142ywane po zako\u0144czeniu odliczania."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<TextView\n    android:id="@+id/timerCounter"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Pozosta\u0142o 7 sekund"\n    android:textSize="30sp"/>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'class MainActivity : AppCompatActivity() {\n\n    lateinit var timerTextView: TextView\n    lateinit var mainLayout: LinearLayout\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContentView(R.layout.activity_main)\n       //...\n\n        timerTextView = findViewById(R.id.timerCounter)\n        mainLayout = findViewById(R.id.main)\n\n        val countDownTimer: CountDownTimer = object : CountDownTimer(7000, 1000) {\n            override fun onTick(millisUntilFinished: Long) {\n                val secondsLeft = millisUntilFinished / 1000\n                timerTextView.text = "Pozosta\u0142o $secondsLeft sekund"\n                mainLayout.setBackgroundColor(Color.rgb(\n                    Random.nextInt(255),\n                    Random.nextInt(255) ,\n                    Random.nextInt(255)\n                ))\n\n            }\n\n            override fun onFinish() {\n                timerTextView.text = "Bomba wybuch\u0142a"\n                timerTextView.setTextColor(Color.WHITE)\n                mainLayout.setBackgroundResource(R.drawable.nuclearbomb)\n            }\n        }\n\n        countDownTimer.start()\n    }\n}\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var t=i(6540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);