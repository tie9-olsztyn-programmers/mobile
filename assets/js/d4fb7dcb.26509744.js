"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[129],{8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var a=n(6540);const o={},s=a.createContext(o);function r(e){const i=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:i},e.children)}},8725:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Intro Kotlin/Klasy/W\u0142a\u015bciwo\u015bci","title":"W\u0142a\u015bciwo\u015bci (Properties)","description":"W\u0142a\u015bciwo\u015b\u0107 (property) vs pole (field)","source":"@site/docs/1. Intro Kotlin/07-Klasy/3.W\u0142a\u015bciwo\u015bci.mdx","sourceDirName":"1. Intro Kotlin/07-Klasy","slug":"/Intro Kotlin/Klasy/W\u0142a\u015bciwo\u015bci","permalink":"/mobile/docs/Intro Kotlin/Klasy/W\u0142a\u015bciwo\u015bci","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1. Intro Kotlin/07-Klasy/3.W\u0142a\u015bciwo\u015bci.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"W\u0142a\u015bciwo\u015bci (Properties)"},"sidebar":"tutorialSidebar","previous":{"title":"Konstruktor","permalink":"/mobile/docs/Intro Kotlin/Klasy/Konstruktor"},"next":{"title":"Dziedziczenie (Inheritance)","permalink":"/mobile/docs/Intro Kotlin/Klasy/Dziedziczenie"}}');var o=n(4848),s=n(8453);const r={title:"W\u0142a\u015bciwo\u015bci (Properties)"},l="W\u0142a\u015bciwo\u015b\u0107",t={},c=[{value:"W\u0142a\u015bciwo\u015b\u0107 (<em>property</em>) vs pole (<em>field</em>)",id:"w\u0142a\u015bciwo\u015b\u0107-property-vs-pole-field",level:2},{value:"W\u0142a\u015bciwo\u015bci",id:"w\u0142a\u015bciwo\u015bci",level:2},{value:"Niestandardowe gettery i settery",id:"niestandardowe-gettery-i-settery",level:2},{value:"W\u0142asna definicja gettera",id:"w\u0142asna-definicja-gettera",level:3},{value:"W\u0142asna definicja settera",id:"w\u0142asna-definicja-settera",level:3},{value:"Op\xf3\u017aniona inicjalizacja",id:"op\xf3\u017aniona-inicjalizacja",level:3},{value:"Operator referencji <code>::</code>",id:"operator-referencji-",level:2}];function d(e){const i={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"w\u0142a\u015bciwo\u015b\u0107",children:"W\u0142a\u015bciwo\u015b\u0107"})}),"\n",(0,o.jsxs)(i.h2,{id:"w\u0142a\u015bciwo\u015b\u0107-property-vs-pole-field",children:["W\u0142a\u015bciwo\u015b\u0107 (",(0,o.jsx)(i.em,{children:"property"}),") vs pole (",(0,o.jsx)(i.em,{children:"field"}),")"]}),"\n",(0,o.jsx)(i.admonition,{title:"Pole to nie w\u0142a\u015bciwo\u015b\u0107",type:"info",children:(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.em,{children:"Field"})," (pole) to najprostsza zmienna zadeklarowana w klasie,"]}),"\n",(0,o.jsx)(i.li,{children:"jest po prostu miejscem, gdzie przechowywana jest warto\u015b\u0107,"}),"\n",(0,o.jsx)(i.li,{children:"w wielu j\u0119zykach programowania (np. Python, JavaScript, C#) pole jest zwyk\u0142ym kawa\u0142kiem pami\u0119ci przypisanym do obiektu,"}),"\n",(0,o.jsx)(i.li,{children:"zazwyczaj nie ma \u017cadnej dodatkowej logiki \u2014 po prostu tam co\u015b jest zapisane."}),"\n"]})}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:["w Kotlinie w\u0142a\u015bciwo\u015b\u0107 (",(0,o.jsx)(i.em,{children:"property"}),") to co\u015b, co \u0142\u0105czy w sobie:"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["pole (",(0,o.jsx)(i.em,{children:"field"}),") i"]}),"\n",(0,o.jsxs)(i.li,{children:["metody dost\u0119powe (czyli ",(0,o.jsx)(i.em,{children:"getter"})," i ",(0,o.jsx)(i.em,{children:"setter"}),"), znane z innych j\u0119zyk\xf3w programowania (np. Java lub C#)."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:["w Kotlinie, kiedy deklarujesz w\u0142a\u015bciwo\u015b\u0107 (np. ",(0,o.jsx)(i.code,{children:"var speed"}),"), kompilator automatycznie"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["generuje pole (",(0,o.jsx)(i.code,{children:"field"}),") o nazwie ",(0,o.jsx)(i.code,{children:"speed"})," oraz d"]}),"\n",(0,o.jsxs)(i.li,{children:["omy\u015blne metody ",(0,o.jsx)(i.em,{children:"getter"})," i ",(0,o.jsx)(i.em,{children:"setter"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.em,{children:"property"})," (w\u0142a\u015bciwo\u015b\u0107) to cecha obiektu, do kt\xf3rej mo\u017cna si\u0119 odwo\u0142a\u0107 z zewn\u0105trz, cz\u0119sto za pomoc\u0105 specjalnych metod (get/set)."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsx)(i.p,{children:"w Kotlinie property to interfejs do warto\u015bci \u2013 mo\u017cesz czyta\u0107 i zmienia\u0107 warto\u015b\u0107, a tak\u017ce dodawa\u0107 logik\u0119 (np. ograniczenia)."}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.em,{children:"property"})," mo\u017ce korzysta\u0107 z pola (",(0,o.jsx)(i.code,{children:"field"}),") do przechowywania warto\u015bci, ale nie musi \u2014 getter/setter mog\u0105 generowa\u0107 warto\u015bci dynamicznie."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"class Car {\n    var speed: Int = 0\n        set(value) {\n            field = if (value > 180) 180 else value // property z w\u0142asn\u0105 logik\u0105\n        }\n}\n"})}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"speed"})," jest ",(0,o.jsx)(i.em,{children:"property"}),","]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"field"})," to pole, kt\xf3re przechowuje warto\u015b\u0107 w\u0142a\u015bciwo\u015bci"]}),"\n",(0,o.jsx)(i.li,{children:"Logika settera pilnuje, by nie przekroczy\u0107 180 km/h"}),"\n"]}),"\n",(0,o.jsx)(i.admonition,{title:"Field vs Property - metafora",type:"important",children:(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"field"})," \u2013 to zbiornik paliwa pod mask\u0105 (jest, trzyma benzyn\u0119, nie zagl\u0105dasz tam na co dzie\u0144),"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"property"})," \u2013 to wska\u017anik poziomu paliwa na desce rozdzielczej:","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["mo\u017cesz sprawdzi\u0107 ile masz paliwa (odczyta\u0107 warto\u015b\u0107 \u2013 ",(0,o.jsx)(i.em,{children:"getter"}),")"]}),"\n",(0,o.jsxs)(i.li,{children:["mo\u017cesz pr\xf3bowa\u0107 nala\u0107 paliwa (zmieni\u0107 warto\u015b\u0107 \u2013 ",(0,o.jsx)(i.em,{children:"setter"}),"),"]}),"\n",(0,o.jsx)(i.li,{children:"ale czasem komputer pok\u0142adowy nie pozwoli ci nala\u0107 za du\u017co lub wy\u015bwietli specjalny komunikat."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.li,{children:"Pole to techniczny \u201epojemnik\u201d, property to \u201einterfejs\u201d dla u\u017cytkownika."}),"\n"]})}),"\n",(0,o.jsx)(i.h2,{id:"w\u0142a\u015bciwo\u015bci",children:"W\u0142a\u015bciwo\u015bci"}),"\n",(0,o.jsx)(i.p,{children:"W\u0142a\u015bciwo\u015bci w Kotlinie definiuje si\u0119 za pomoc\u0105 s\u0142\xf3w kluczowych:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"var"})," (dla zmiennych, kt\xf3re mo\u017cna modyfikowa\u0107) lub"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"val"})," (dla zmiennych tylko do odczytu)"]}),"\n"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'\nclass Osoba {\n     var imie: String = "Nieznane" // Zmienna w\u0142a\u015bciwo\u015b\u0107 (mo\u017cna j\u0105 modyfikowa\u0107)\n     val wiek: Int = 30 // W\u0142a\u015bciwo\u015b\u0107 tylko do odczytu (sta\u0142a)\n}\n\nfun main() {\n     val osoba = Osoba()\n     osoba.imie = "Jan" // Zmiana w\u0142a\u015bciwo\u015bci imie\n     println(osoba.imie) // Wypisze: Jan\n     println(osoba.wiek) // Wypisze: 30\n     // osoba.wiek = 35 // B\u0142\u0105d kompilacji, poniewa\u017c `wiek` jest w\u0142a\u015bciwo\u015bci\u0105 tylko do odczytu (val)\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"niestandardowe-gettery-i-settery",children:"Niestandardowe gettery i settery"}),"\n",(0,o.jsx)(i.h3,{id:"w\u0142asna-definicja-gettera",children:"W\u0142asna definicja gettera"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"class Prostokat(var szerokosc: Int, var wysokosc: Int) {\n     val pole: Int\n     get() = szerokosc * wysokosc // Niestandardowy getter, oblicza pole na podstawie szeroko\u015bci i wysoko\u015bci\n}\n\n\nfun main() {\n     val prostokat = Prostokat(5, 10)\n     println(prostokat.pole) // Wypisze: 50\n\n     prostokat.szerokosc = 7\n     println(prostokat.pole) // Wypisze: 70 (warto\u015b\u0107 zosta\u0142a przeliczona na nowo)\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"w\u0142asna-definicja-settera",children:"W\u0142asna definicja settera"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'class Osoba {\n     var wiek: Int = 0\n     set(value) {\n         if (value >= 0) field = value // Ustawiamy warto\u015b\u0107 tylko, je\u015bli jest nieujemna\n         else println("Wiek nie mo\u017ce by\u0107 ujemny.")\n     }\n}\n\nfun main() {\n     val osoba = Osoba()\n     osoba.wiek = 25 // Zadzia\u0142a poprawnie\n     println(osoba.wiek) // Wypisze: 25\n\n     osoba.wiek = -5 // Wypisze: Wiek nie mo\u017ce by\u0107 ujemny.\n     println(osoba.wiek) // Wypisze: 25 (warto\u015b\u0107 nie zosta\u0142a zmieniona)\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"op\xf3\u017aniona-inicjalizacja",children:"Op\xf3\u017aniona inicjalizacja"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'class Osoba {\n    lateinit var imie: String // Deklaracja w\u0142a\u015bciwo\u015bci z p\xf3\u017an\u0105 inicjalizacj\u0105\n\n    fun inicjalizujImie(noweImie: String) {\n        imie = noweImie\n    }\n\n\n    fun powitaj() {\n        if (::imie.isInitialized) { // Sprawdzamy, czy w\u0142a\u015bciwo\u015b\u0107 zosta\u0142a zainicjalizowana\n            println("Cze\u015b\u0107, mam na imi\u0119 $imie")\n        } else {\n            println("Imi\u0119 nie zosta\u0142o jeszcze zainicjalizowane.")\n        }\n    }\n}\n\nfun main() {\n    val osoba = Osoba()\n    osoba.powitaj() // Wypisze: Imi\u0119 nie zosta\u0142o jeszcze zainicjalizowane.\n    osoba.inicjalizujImie("Marek")\n    osoba.powitaj() // Wypisze: Cze\u015b\u0107, mam na imi\u0119 Marek\n}\n'})}),"\n",(0,o.jsxs)(i.h2,{id:"operator-referencji-",children:["Operator referencji ",(0,o.jsx)(i.code,{children:"::"})]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["operator ",(0,o.jsx)(i.code,{children:"::"})," pozwala uzyska\u0107 referencj\u0119 do w\u0142a\u015bciwo\u015bci, funkcji lub klasy,"]}),"\n",(0,o.jsxs)(i.li,{children:["w\u0142a\u015bciwo\u015bci ",(0,o.jsx)(i.code,{children:"lateinit"})," mog\u0105 by\u0107 sprawdzane pod k\u0105tem inicjalizacji za pomoc\u0105 ",(0,o.jsx)(i.code,{children:"::property.isInitialized"}),","]}),"\n",(0,o.jsx)(i.li,{children:"operator ten jest u\u017cywany, aby uzyska\u0107 referencj\u0119 do nazwy w\u0142a\u015bciwo\u015bci, funkcji lub klasy, a nie samej jej warto\u015bci,"}),"\n",(0,o.jsx)(i.li,{children:"pozwala na prac\u0119 z funkcjami i w\u0142a\u015bciwo\u015bciami jak z obiektami (mo\u017cna je przekazywa\u017c jako argumenty funkcji wy\u017cszego rz\u0119du)"}),"\n"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'\nclass Osoba(val imie: String, val wiek: Int)\n\nfun main() {\n     val osoba = Osoba("Jan", 30)\n\n     // Referencja do w\u0142a\u015bciwo\u015bci `imie`\n     val referencjaDoImienia = Osoba::imie\n     println(referencjaDoImienia) // wypiesz property imie\n\n    // Uzyskanie warto\u015bci w\u0142a\u015bciwo\u015bci z referencji\n     println(referencjaDoImienia.get(osoba)) // Wypisze: Jan\n\n}\n\n'})})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);