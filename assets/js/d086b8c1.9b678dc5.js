"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[515],{5656:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>c,contentTitle:()=>t,default:()=>z,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Intro Kotlin/Klasy/OOP","title":"Object-Oriented Programming (OOP)","description":"Metafora ciasta.","source":"@site/docs/1. Intro Kotlin/07-Klasy/0.OOP.mdx","sourceDirName":"1. Intro Kotlin/07-Klasy","slug":"/Intro Kotlin/Klasy/OOP","permalink":"/mobile/docs/Intro Kotlin/Klasy/OOP","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1. Intro Kotlin/07-Klasy/0.OOP.mdx","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"Object-Oriented Programming (OOP)"},"sidebar":"tutorialSidebar","previous":{"title":"Podsumowanie funkcji strza\u0142kowych wbudowanych","permalink":"/mobile/docs/Intro Kotlin/Funkcje/podsumowanie"},"next":{"title":"Wprowadzenie do klas w Kotlinie","permalink":"/mobile/docs/Intro Kotlin/Klasy/Wprowadzenie do klas"}}');var o=a(4848),s=a(8453);const r={title:"Object-Oriented Programming (OOP)"},t="Programowanie obiektowe metaforycznie",c={},l=[{value:"1. Abstrakcja",id:"1-abstrakcja",level:2},{value:"2. Enkapsulacja (Hermetyzacja)",id:"2-enkapsulacja-hermetyzacja",level:2},{value:"3. Dziedziczenie",id:"3-dziedziczenie",level:2},{value:"4. Polimorfizm",id:"4-polimorfizm",level:2}];function d(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"programowanie-obiektowe-metaforycznie",children:"Programowanie obiektowe metaforycznie"})}),"\n",(0,o.jsx)(i.p,{children:"Metafora ciasta."}),"\n",(0,o.jsx)(i.h2,{id:"1-abstrakcja",children:"1. Abstrakcja"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:'To jak og\xf3lny przepis na ciasto, kt\xf3ry nie zdradza wszystkich szczeg\xf3\u0142\xf3w, ale m\xf3wi, co najwa\u017cniejsze: masz klas\u0119 "Ciasto" (Cake), ale nie przejmujesz si\u0119 na tym etapie, czy to czekoladowe, czy sernik.'}),"\n",(0,o.jsx)(i.li,{children:"W praktyce: Tworzysz og\xf3ln\u0105 klas\u0119, kt\xf3ra opisuje tylko to, co najwa\u017cniejsze."}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"2-enkapsulacja-hermetyzacja",children:"2. Enkapsulacja (Hermetyzacja)"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"To jak zamkni\u0119cie pewnych tajemnic pieczenia tylko dla kucharza \u2014 klient wie, \u017ce dostanie ciasto, ale nie musi wiedzie\u0107, jak dok\u0142adnie zosta\u0142o zrobione."}),"\n",(0,o.jsxs)(i.li,{children:["W praktyce: Ukrywasz szczeg\xf3\u0142y dzia\u0142ania klasy (np. sk\u0142adniki lub metody jako ",(0,o.jsx)(i.em,{children:"private"}),"), udost\u0119pniasz tylko potrzebne rzeczy na zewn\u0105trz (np. przez ",(0,o.jsx)(i.code,{children:"fun"})," i ",(0,o.jsx)(i.code,{children:"val"})," jako ",(0,o.jsx)(i.code,{children:"public"}),")."]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"3-dziedziczenie",children:"3. Dziedziczenie"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"To jak tworzenie nowych przepis\xf3w na bazie starego \u2014 masz przepis na ciasto, a teraz robisz nowy przepis: \u201eciasto z owocami\u201d, kt\xf3ry korzysta z przepisu bazowego, ale dodaje co\u015b od siebie."}),"\n",(0,o.jsx)(i.li,{children:"W praktyce: Nowa klasa mo\u017ce dziedziczy\u0107 cechy i zachowania po innej klasie."}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"4-polimorfizm",children:"4. Polimorfizm"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"To jak zamawianie ciasta, nie m\xf3wi\u0105c dok\u0142adnie jakiego \u2014 dostajesz takie, jakie akurat pasuje."}),"\n",(0,o.jsx)(i.li,{children:"Zamawiasz \u201eciasto\u201d, a kucharz mo\u017ce zrobi\u0107 czekoladowe lub sernik, w zale\u017cno\u015bci od sytuacji."}),"\n",(0,o.jsx)(i.li,{children:"W praktyce: Jeden interfejs (np. metoda piec()), wiele r\xf3\u017cnych realizacji (inne przepisy na ciasta, ale wywo\u0142ujesz je tak samo)."}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"Podsumowanie w punktach:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Abstrakcja: skupiasz si\u0119 na najwa\u017cniejszych cechach, reszt\u0119 ukrywasz"}),"\n",(0,o.jsx)(i.li,{children:"Enkapsulacja: ukrywasz szczeg\xf3\u0142y wewn\u0119trzne klasy, udost\u0119pniasz tylko to, co trzeba"}),"\n",(0,o.jsx)(i.li,{children:"Dziedziczenie: mo\u017cesz rozszerza\u0107 klasy bazowe i tworzy\u0107 bardziej szczeg\xf3\u0142owe"}),"\n",(0,o.jsx)(i.li,{children:"Polimorfizm: mo\u017cesz traktowa\u0107 r\xf3\u017cne obiekty tak samo (np. r\xf3\u017cne ciasta, jeden spos\xf3b zamawiania)"}),"\n"]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h1,{id:"oop-technicznie-wyra\u017cone",children:"OOP technicznie wyra\u017cone"})]})}function z(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,a)=>{a.d(i,{R:()=>r,x:()=>t});var n=a(6540);const o={},s=n.createContext(o);function r(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);