"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[2],{3847:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Kotlin - wprowadzenie/Funkcje/DodatkoweFunkcje","title":"Dodatkowe funkcje wy\u017cszego rz\u0119du","description":"","source":"@site/docs/1. Kotlin - wprowadzenie/06-Funkcje/70-DodatkoweFunkcje.mdx","sourceDirName":"1. Kotlin - wprowadzenie/06-Funkcje","slug":"/Kotlin - wprowadzenie/Funkcje/DodatkoweFunkcje","permalink":"/mobile/docs/Kotlin - wprowadzenie/Funkcje/DodatkoweFunkcje","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1. Kotlin - wprowadzenie/06-Funkcje/70-DodatkoweFunkcje.mdx","tags":[],"version":"current","sidebarPosition":70,"frontMatter":{"title":"Dodatkowe funkcje wy\u017cszego rz\u0119du"},"sidebar":"tutorialSidebar","previous":{"title":"forEach()","permalink":"/mobile/docs/Kotlin - wprowadzenie/Funkcje/foreach"},"next":{"title":"Object-Oriented Programming (OOP)","permalink":"/mobile/docs/Kotlin - wprowadzenie/Klasy/OOP"}}');var a=t(4848),i=t(8453);const r={title:"Dodatkowe funkcje wy\u017cszego rz\u0119du"},s=void 0,l={},c=[];function d(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-kotlin",children:'fun main() {\n\ndata class Person(val name: String, val age: Int, val job: String)\n\nfun main() {\n   \tval people = listOf("Zosia", "Adam", "Kasia")\n\tval sorted = people.sortedBy{it}\n    val sortedDesc = people.sortedDescending()\n\tprintln(sorted) // [Adam, Kasia, Zosia]\n    println(sortedDesc) // [Zosia, Kasia, Adam]\n\n\n    // Pobieranie lub pomijanie element\xf3w z pocz\u0105tku/ko\u0144ca listy.\n    val nums = listOf(1, 2, 3, 4, 5)\n    println(nums.take(3))     // [1, 2, 3]\n    println(nums.drop(2))     // [3, 4, 5]\n    println(nums.takeLast(2)) // [4, 5]\n    println(nums.dropLast(2)) //[1,2,3]\n\n    // znajdowanie\n    val names = listOf("Anna", "Beata", "Celina")\n    println(names.find { it.startsWith("B") }) // Beata\n    println(names.firstOrNull { it.length > 15 }) // null\n\n\n    // grupowanie\n    data class Person2(val name: String, val city: String)\n\n\tval people2 = listOf<Person2>(\n        Person2("Alice", "Warsaw"),\n        Person2("Bob", "Krakow"),\n        Person2("Eve", "Warsaw")\n\t)\n\n    val cityGrouped = people2\n        .groupBy {it.city }\n        .mapValues { entry -> entry.value.map { it.name } }\n    println(cityGrouped)\n    // {Warsaw=[Alice, Eve], Krakow=[Bob]}\n\n\n'})})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);