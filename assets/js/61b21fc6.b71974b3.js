"use strict";(self.webpackChunkmobile=self.webpackChunkmobile||[]).push([[334],{8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var o=a(6540);const i={},r=o.createContext(i);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(r.Provider,{value:n},e.children)}},9452:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Kotlin - wprowadzenie/Funkcje/foreach","title":"forEach()","description":"-","source":"@site/docs/1. Kotlin - wprowadzenie/06-Funkcje/65.foreach.mdx","sourceDirName":"1. Kotlin - wprowadzenie/06-Funkcje","slug":"/Kotlin - wprowadzenie/Funkcje/foreach","permalink":"/mobile/docs/Kotlin - wprowadzenie/Funkcje/foreach","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1. Kotlin - wprowadzenie/06-Funkcje/65.foreach.mdx","tags":[],"version":"current","sidebarPosition":65,"frontMatter":{"title":"forEach()"},"sidebar":"tutorialSidebar","previous":{"title":"Funkcja fold()","permalink":"/mobile/docs/Kotlin - wprowadzenie/Funkcje/redukcja-fold"},"next":{"title":"Dodatkowe funkcje wy\u017cszego rz\u0119du","permalink":"/mobile/docs/Kotlin - wprowadzenie/Funkcje/DodatkoweFunkcje"}}');var i=a(4848),r=a(8453);const t={title:"forEach()"},l=void 0,s={},c=[{value:"title: forEach()",id:"title-foreach",level:2},{value:"Podstawowe zastosowanie",id:"podstawowe-zastosowanie",level:2},{value:"Przyk\u0142ad z indeksem",id:"przyk\u0142ad-z-indeksem",level:2},{value:"Przyk\u0142ad ze s\u0142ownikiem/map\u0105",id:"przyk\u0142ad-ze-s\u0142ownikiemmap\u0105",level:2},{value:"Przyk\u0142ad z obiektem",id:"przyk\u0142ad-z-obiektem",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"title-foreach",children:"title: forEach()"}),"\n",(0,i.jsx)(n.h1,{id:"foreach",children:(0,i.jsx)(n.code,{children:"forEach()"})}),"\n",(0,i.jsx)(n.p,{children:"- w Kotlinie dzia\u0142a bardzo podobnie jak w TypeScripcie czy C#\n- to metoda kolekcji, kt\xf3ra pozwala wykona\u0107 dan\u0105 akcj\u0119 dla ka\u017cdego elementu listy, zbioru czy mapy."}),"\n",(0,i.jsx)(n.h2,{id:"podstawowe-zastosowanie",children:"Podstawowe zastosowanie"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'  val numbers = listOf(1, 2, 3, 4, 5)\n\n    numbers.forEach { number ->\n        println("Liczba: $number")\n    }\n/*\n    mo\u017cna skr\xf3ci\u0107 do:\n    numbers.forEach { println("Liczba: $it") }\n*/\n\n// zapis r\xf3wnowa\u017cny\n for(number in numbers) {\n      println("Liczba: $number")\n  }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"przyk\u0142ad-z-indeksem",children:"Przyk\u0142ad z indeksem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val fruits = listOf("apple", "banana", "cherry")\n\n\tfruits.forEachIndexed { index, fruit ->\n   \t\tprintln("${index + 1}. $fruit")\n\t}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"przyk\u0142ad-ze-s\u0142ownikiemmap\u0105",children:"Przyk\u0142ad ze s\u0142ownikiem/map\u0105"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val people = mapOf("Alice" to 25, "Bob" to 30)\n\npeople.forEach { (name, age) ->\n    println("$name ma $age lat")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"przyk\u0142ad-z-obiektem",children:"Przyk\u0142ad z obiektem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'data class Person(val name: String, val age: Int, val job: String)\n\nfun main() {\n    val people = listOf(\n        Person("Alice", 25, "Engineer"),\n        Person("Bob", 30, "Teacher"),\n        Person("Charlie", 22, "Designer")\n    )\n\n    // Dla ka\u017cdego elementu z listy wykonaj kod w lambda\n    people.forEach { person ->\n        println("${person.name} ma ${person.age} lat i pracuje jako ${person.job}.")\n    }\n}\n\n// w wersji skr\xf3conej:\n    people.forEach {\n        println("${it.name} ma ${it.age} lat i pracuje jako ${it.job}.")\n    }\n}\n\n// z warunkiem\npeople.forEach {\n    if (it.age >= 30) {\n        println("${it.name} jest doros\u0142y i ma ${it.age} lat.")\n    }\n   }\n\n\n//z indeksem\n \tpeople.forEachIndexed { index, person ->\n    \tprintln("${index + 1}. ${person.name} (${person.job})")\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);